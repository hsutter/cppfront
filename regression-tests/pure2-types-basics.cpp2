
N: namespace = {

myclass : type = {

    operator=: (implicit out this, x: int) = {
        data = x;
        // use default initializer for this.more
        std::cout << "myclass: implicit from int\n";
        print();
    }

    operator=: (out this, s: std::string) = {
        this.data = 99;
        this.more = s;
        std::cout << "myclass: explicit from string\n";
        print();
    }

    operator=: (out this, x: int, s: std::string) = {
        this.data = 77;
        this.more = s + std::to_string(x) + " plugh";
        std::cout << "myclass: from int and string\n";
        print();
    }

    operator=: (out this) = {
        // use default initializer for this.data
        more = std::to_string(3.14159);
        std::cout << "myclass: default\n";
        print();
    }

    print: (this) = {
        std::cout << "    data: (data)$, more: (more)$\n";
    }

    print: (move this) = {
        std::cout << "    (move print) data: (data)$, more: (more)$\n";
    }

    operator=: (move this) = {
        std::cout << "myclass: destructor\n";
    }

    f: (this, x: int) = {
        std::cout << "N::myclass::f with (x)$\n";
    }

    data: int         = 42 * 12;
    more: std::string = std::to_string(42 * 12);

    nested : type = {
        g: () = { std::cout << "N::myclass::nested::g\n"; }
    }

    f1: <T     , U     > (t:T, u:U) = t+u;
    f2: <T:type, U:type> (t:T, u:U) = t+u;
    f3: <T:_   , U:_   > ()         = T+U;
    f4: <T:i8  , U:i16 > ()         = T+U;

}

}

main: () = {
    x: N::myclass = 1;
    x.f(53);
    N::myclass::nested::g();
    std::cout << "f1: (x.f1(1,1))$\n";
    std::cout << "f2: (x.f2(2,2))$\n";
    std::cout << "f3: (x.f3<3,3>())$\n";
    std::cout << "f4: (x.f4<4,4>())$\n";
    _: N::myclass = "abracadabra";
    _: N::myclass = ();
    _: N::myclass = (1, "hair");

    // Invoke the single-param operator=s as actual assignments
    std::cout << "x's state before assignments: ";
    x.print();
    x = 84;
    x = "syzygy";
    x = 84;
    x = "syzygy";
}
