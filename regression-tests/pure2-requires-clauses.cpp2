
X:  <T: type, U: type>
    type
    requires std::is_same_v<T, int>
              && std::is_same_v<U, int>
= {
    operator=: (out this) = { }
}

f:  <T: type, U: type>
    (forward a: int, forward b: int) -> int
    requires std::is_same_v<T, int>
              && std::is_same_v<U, int>
= {
    return a * b;
}

v: <T> const T requires std::same_as<T, i32> = 0;
v2: <T> T requires std::same_as<T, i32> == 0;
t: <T> type requires std::same_as<T, i32> == T;

main: () = {
    x: X<int,int> = ();
    std::cout << f<int,int>(2,5);
}
