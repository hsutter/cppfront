
#include <string>
#include <cstdlib>
#include <ctime>

copy_from: (copy _) = { }

parameter_styles: (
    in    _: std::string, // "in" is default
    copy  b: std::string,
    inout _: std::string,
    move  d: std::string
    )
= {
    z: int = 12;

    z++;
    b += "plugh";

    if std::rand()%2 {
        z++;
        copy_from(b);   // definite last use
    }
    else {
        copy_from(b&);  // NB: better not move from this (why not?)
        copy_from(d);
        copy_from(z++);
    }

    // std::move(z);

    copy_from(z);

    if std::time(nullptr)%2 == 0 {
        copy_from(z);
    }

}

min: (in_ref a, in_ref b) -> forward_ref _
    = { if b < a { return b; } else { return a; } }

container: <T> type = {
    buf: std::array<T, 10> = ();
    operator[]: (      this, idx: i32) -> forward T = buf[idx];
    operator[]: (inout this, idx: i32) -> forward T = buf[idx];
}

main: () = {
    x := 456;
    y := 123;
    std::cout << min(x, y) << '\n';

    v: container<int> = ();
    std::cout << v[0] << '\n';
}

