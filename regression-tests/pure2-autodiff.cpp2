
ad_test: @autodiff @print type = {

    add_1: (x: double, y: double) -> (r: double) = {
        r = x + y;
    }

    add_2: (x: double, y: double) -> (r: double) = {
        r = x + y + x;
    }

    sub_1: (x: double, y: double) -> (r: double) = {
        r = x - y;
    }

    sub_2: (x: double, y: double) -> (r: double) = {
        r = x - y - x;
    }

    add_sub_2: (x: double, y: double) -> (r: double) = {
        r = x + y - x;
    }

    mul_1: (x: double, y: double) -> (r: double) = {
        r = x * y;
    }

    mul_2: (x: double, y: double) -> (r: double) = {
        r = x * y * x;
    }

    div_1: (x: double, y: double) -> (r: double) = {
        r = x / y;
    }

    div_2: (x: double, y: double) -> (r: double) = {
        r = x / y / y;
    }

    mul_div_2: (x: double, y: double) -> (r: double) = {
        r = x * y / x;
    }

    mul_add: (x: double, y: double) -> (r: double) = {
        r = x * (x + y);
    }

    add_mul: (x: double, y: double) -> (r: double) = {
        r = x + x * y;
    }

    func: (x: double, y: double) -> (r: double) = {
      r = x + y;
    }

    func_call: (x: double, y: double) -> (r: double) = {
      r = x * func(x, y);
    }

    sin_call: (x: double, y: double) -> (r: double) = {
      r = sin(x - y);
    }

    if_branch: (x: double, y: double) -> (r: double) = {
      r = x;

      if x < 0.0 {
        r = y;
      }
    }

    if_else_branch: (x: double, y: double) -> (r: double) = {
      if x < 0.0 {
        r = y;
      }
      else {
        r = x;
      }
    }

    direct_return: (x: double, y: double) -> double = {
      return x + y;
    }

    intermediate_var: (x: double, y: double) -> (r: double) = {
      t: double = (); // TODO: change to x initializer when we have access to the initializer expression.
      t = x + y;

      r = t;
    }
}

write_output: (func: std::string, x: double, x_d: double, y: double, y_d: double, ret) = {
    std::cout << "diff((func)$) at (x = (x)$, x_d = (x_d)$, y = (y)$, y_d = (y_d)$) = (r = (ret.r)$, r_d = (ret.r_d)$)" << std::endl;
}

main: () = {

    x:   double = 2.0;
    x_d: double = 1.0;
    y:   double = 3.0;
    y_d: double = 2.0;

    write_output("x + y", x, x_d, y, y_d, ad_test::add_1_diff(x, x_d, y, y_d));
    write_output("x + y + x", x, x_d, y, y_d, ad_test::add_2_diff(x, x_d, y, y_d));
    write_output("x - y", x, x_d, y, y_d, ad_test::sub_1_diff(x, x_d, y, y_d));
    write_output("x - y - x", x, x_d, y, y_d, ad_test::sub_2_diff(x, x_d, y, y_d));
    write_output("x + y - x", x, x_d, y, y_d, ad_test::add_sub_2_diff(x, x_d, y, y_d));
    write_output("x * y", x, x_d, y, y_d, ad_test::mul_1_diff(x, x_d, y, y_d));
    write_output("x * y * x", x, x_d, y, y_d, ad_test::mul_2_diff(x, x_d, y, y_d));
    write_output("x / y", x, x_d, y, y_d, ad_test::div_1_diff(x, x_d, y, y_d));
    write_output("x / y / y", x, x_d, y, y_d, ad_test::div_2_diff(x, x_d, y, y_d));
    write_output("x * y / x", x, x_d, y, y_d, ad_test::mul_div_2_diff(x, x_d, y, y_d));
    write_output("x * (x + y)", x, x_d, y, y_d, ad_test::mul_add_diff(x, x_d, y, y_d));
    write_output("x + x * y", x, x_d, y, y_d, ad_test::add_mul_diff(x, x_d, y, y_d));
    write_output("x * func(x, y)", x, x_d, y, y_d, ad_test::func_call_diff(x, x_d, y, y_d));
    write_output("sin(x + y)", x, x_d, y, y_d, ad_test::sin_call_diff(x, x_d, y, y_d));
    write_output("if branch", x, x_d, y, y_d, ad_test::if_branch_diff(x, x_d, y, y_d));
    write_output("if else branch", x, x_d, y, y_d, ad_test::if_else_branch_diff(x, x_d, y, y_d));
    write_output("direct return", x, x_d, y, y_d, ad_test::direct_return_diff(x, x_d, y, y_d));
    write_output("intermediate var", x, x_d, y, y_d, ad_test::intermediate_var_diff(x, x_d, y, y_d));
}
