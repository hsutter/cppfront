f_inout: (inout x: int) -> _ = {
    x *= 2;
    return x;
}

issue_350: () = {
    x := 21;

    l1 := :(forward x) = {
        std::cout << f_inout(forward x) << std::endl;
    };

    l1(x);

    x++;
}

issue_683: (args) = {
    for args do (n) {
        _ = n;
    }

    n: int;
    n = 0;
}

issue_825: () = {
  _ = :(copy b) _ = b;
  _ = :(move c) _ = c;
  _ = :(forward d) _ = d;
}

issue_832: () = {
  i := 0;
  while i { }
}

make_copy: (copy x) x;

issue_847_0: (copy v: std::vector<std::unique_ptr<int>>) = { for v.make_copy() do (_) { } }
issue_847_1: (move v: std::vector<std::unique_ptr<int>>) = { for v.make_copy() do (_) { } }
issue_847_2: (forward v) = { for v.make_copy() do (_) { } }
issue_847_3: (copy x: int) = { for (x) do (_) { } }

f_inout: (inout _: std::unique_ptr<int>) = { }
f_copy: (copy _...) = { }

issue_857: type = {
  a: std::unique_ptr<int>;
  b: std::unique_ptr<int>;
  operator=: (out this, move that) = { }
  operator=: (move this) = f_copy(a, this.b);
  f: (move this) = f_copy(this);
  f: (move this, move that) = f_copy(this, that);
  g: (move this) = f_copy(this.a);
  g: (move this, move that) = f_copy(this.a, that.a);
  h: (inout this) = f_inout(a);
  i: (move this) = f_copy(a);
  j: (move this) = f_copy(a);
  k: (move this) = f_copy(a, b);
  l: (move this) = k();
}

issue_857_2: @struct type = {
  a: std::unique_ptr<int>; // OK: No error about 'a' being unused.
}

gi: int = 0;
issue_857_3: @struct type = {
  i: std::add_lvalue_reference_t<int> = gi;
  f: (move this) = _ = f_inout(i);
}

issue_888: (copy r: std::string, copy size: int) = {
  // ...
  _ = r.size();
  // ...
}

draw: () = {
  pos       := 0;
  vertex    := :(_) = { };
  _ = (pos).vertex();
}

my_string: @struct type = {
  string: std::string;
  size: std::size_t = string.size();
}

main: (args) = {
  issue_683(args);
  issue_847_2(std::vector<std::unique_ptr<int>>());
}
