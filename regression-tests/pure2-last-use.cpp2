f_inout: (inout _) = { }
f_copy: (copy _...) = { }
pred: (_...) true;
pred_copy: (copy _...) true;
identity: <T> (forward x: T) -> forward _ requires std::is_reference_v<T> == { return x; }
identity_copy: (copy x) -> _ requires  std::copyable<decltype(x)> = x;
identity_copy: (move x) -> _ requires !std::copyable<decltype(x)> = (move x);

issue_313: () = {
//   _ = :() -> std::vector<int> = {
//     a := new<int>(0);
//     return (a*, identity_copy(a)*);
//   };
//   _ = :() -> std::vector<int> = {
//     a := new<int>(0);
//     return (a&**, identity_copy(a)*);
//   };
  _ = :() -> int = {
    a := new<int>(0);
    return identity(a)* + identity(a)*;

    b := new<int>(0);
    return identity(b)* = identity(b)*;

    c := new<int>(0);
    return identity(c)* ^ identity(c)*;
  };
  {
    a := new<int>(0);
    identity(a)* = identity(a)*;

    b := new<int>(0);
    _: int = identity(b)* = identity(b)*;

    c := new<int>(0);
    if identity(c)* * identity(c)* { }

    d := new<int>(0);
    if (identity(d)* - identity(d)*) { }

    e := new<int>(0);
    _ = e is (e);

    f := new<int>(0);
    _ = f is std::type_identity_t<decltype(f)>; // OK?

    g := new<int>(0);
    for (identity(g)* + identity(g)*)
    do (_)
    { }

    h := new<int>(0);
    while identity(h)* + identity(h)*
    { }

    i := new<int>(0);
    do { }
    while identity(i)* + identity(i)*;

    j := new<int>(0);
    k := new<int>(0);
    _ = inspect identity(j)* + identity(j)* -> int {
        is (identity(k)* + identity(k)*) = 0;
        is _ = 0;
    };

  }
//   {
//     a := new<int>(0);
//     _ = :() identity(a$)* + identity(a$)*;
//   }
}
issue_313_1: (copy x: std::unique_ptr<int>) pre(identity(x)* + identity(x)*) = { }

issue_350: () = {
    x := 21;

    l1 := :(forward x) = {
        f_inout(forward x);
    };

    l1(x);

    x++;
}
/*
issue_440_0: () -> int = {
  i: int;
  if true {
    i = 1;
    return i;
  }
  i = 2;
  return i;
}

issue_440_1: () -> (i: int) = {
  if true {
    i = 1;
    return;
  }
  i = 2;
}
*/
issue_683: (args) = {
    for args do (n) {
        _ = n;
    }

    n: int;
    n = 0;
}

issue_825: () = {
  _ = :(copy b: std::unique_ptr<int>) f_copy(move b);
  _ = :(move c: std::unique_ptr<int>) f_copy(move c);
  _ = :(forward d) f_copy(d);(new<int>(0));
}

issue_832: () = {
  i := 0;
  while i { }
}

make_copy: (copy x) x;

issue_847_4: (copy v: std::vector<int>) = {
  for v.make_copy()
  do (copy x) {
    f_copy(x);
  }
}
issue_847_0: (copy v: std::vector<std::unique_ptr<int>>) = {
  // TODO Use 'std::views::as_rvalue`
  for v.make_copy()
  do (_) {
  }
}
issue_847_1: (move v: std::vector<std::unique_ptr<int>>) = {
  for v.make_copy()
  do (move x) {
    f_inout(x);
  }
}
issue_847_5: (forward v) = {
  for v.make_copy()
  do (forward x) {
    f_copy(x);
  }
}
issue_847_2: (forward v) = {
  for v.make_copy()
  do (forward _) {
  }
}
issue_847_3: (copy x: int) = { for (x) do (_) { } }

issue_850: () = {
    v: std::vector = ( 1, 2, 3, 4, 5 );

    //  Definite last use of v => move-capture v into f's closure
    f := :() -> forward _ = { return v$; };

    //  Now we can access the vector captured inside f()...
    f().push_back(6);
    for f() do(e) std::cout << e;       // prints 123456
}

issue_857: type = {
  a: std::unique_ptr<int>;
  b: std::unique_ptr<int>;
  operator=: (out this, move that) = { }
  operator=: (move this) = {
    f_inout(a);
    f_inout(this.b);
  }
  //f: (move this) = f_copy(this);
  //f: (move this, move that) = f_copy(this, that);
  //g: (move this) = f_copy(this.a);
  //g: (move this, move that) = f_copy(this.a, that.a);
  h: (inout this) = f_inout(a);
  //i: (move this) = f_copy(a);
  //j: (move this) = f_copy(a);
  //k: (move this) = {
  //  f_inout(a);
  //  f_copy(b);
  //}
  //l: (move this) = k();
  //m: (move this) = this.k();
  //n: (_) = { }
  //n: (move this) = { }
  //o0:(move this) = n();
  //o1:(move this) = this.n();
  //o2:(move this) = 0.n();
  //o3:(move this) = n(0);
  //o4:(move this) = n(this);
  //p0: (move this) = {
  //  f_inout(a);
  //  f_copy(this.a);
  //}
  //p1: (move this) = {
  //  f_inout(this.a);
  //  f_copy(a);
  //}
  //p2: (move this) = {
  //  f_inout(a);
  //  f_copy(this);
  //}
  //p3: (move this) = {
  //  f_inout(this);
  //  f_copy(a);
  //}
  //q: (move this) = {
  //  h();
  //  n();
  //}
  //z: (move this, move that) = {
  ///*f */      if true { f_copy(this); }
  ///*f */ else if true { f_copy(this, that); }
  ///*g */ else if true { f_copy(this.a); }
  ///*g */ else if true { f_copy(this.a, that.a); }
  ///*i */ else if true { f_copy(a); }
  ///*j */ else if true { f_copy(a); }
  ///*k */ else if true {
  ///*k */   f_inout(a);
  ///*k */   f_copy(b);
  ///*k */ }
  ///*l */ else if true { k(); }
  ///*m */ else if true { this.k(); }
  ///*o1*/ else if true { n(); }
  ///*o2*/ else if true { this.n(); }
  ///*o3*/ else if true { n(0); }
  ///*o4*/ else if true { n(this); }
  ///*p0*/ else if true {
  ///*p0*/   f_inout(a);
  ///*p0*/   f_copy(this.a);
  ///*p0*/ }
  ///*p1*/ else if true {
  ///*p1*/   f_inout(this.a);
  ///*p1*/   f_copy(a);
  ///*p1*/ }
  ///*p2*/ else if true {
  ///*p2*/   f_inout(a);
  ///*p2*/   f_copy(this);
  ///*p2*/ }
  ///*p3*/ else if true {
  ///*p3*/   f_inout(this);
  ///*p3*/   f_copy(a);
  ///*p3*/ }
  ///*q */ else {
  ///*q */   h();
  ///*q */   n();
  ///*q */ }
  //}
}

issue_857_2: @struct type = {
  a: std::unique_ptr<int>; // OK: No error about 'a' being unused.
}

gi: int = 0;
issue_857_3: @struct type = {
  i: std::add_lvalue_reference_t<int> = gi;
  f: (move this) = f_inout(i); // OK: The implicit `this` is moved, not `i`.
}
issue_857_6: @struct type = {
  f: (move this) = f_inout(i); // OK: The implicit `this` is moved, not `i`.
  i: std::add_lvalue_reference_t<int> = gi;
}

// TODO Alias `std::move_only_function`.
move_only_function: <T> type = {
  operator=: (out this) = { }
  operator=: (out this, move that) = { }
  operator(): (move this, _...) -> int = 0;
}

issue_857_4: @struct type = {
   f: std::add_pointer_t<int()>;
   g: std::add_pointer_t<int(int)>;
  mf: move_only_function<int()>;
  mg: move_only_function<int(int)>;
//   h0: (move this) = _ = mf();
//   h1: (move this) = _ = this.mf();
//   h2: (move this, that) = _ = that.mf();
//   h3: (move this, that) = _ = that.f;
//   h4: (move this, x: int) = _ = x.mg();
//   h5: (move this, x: int) = _ = f() + x.g();      // FIXME #313.
//   h6: (move this, x: int) = _ = x.g() + f();      // FIXME #313.
//   h7: (move this, x: int) = _ = this.f() + x.g(); // FIXME #313.
//   h8: (move this, x: int) = _ = x.g() + this.f(); // FIXME #313.
//   i0: (move this, x: int) = {
//     _ = f();
//     _ = x.mg();
//   }
//   i1: (move this, x: int) = {
//     _ = x.g();
//     _ = mf();
//   }
//   i2: (move this, x: int) = {
//     _ = this.f();
//     _ = x.mg();
//   }
//   i3: (move this, x: int) = {
//     _ = x.g();
//     _ = this.mf();
//   }
//   z: (move this, that) = {
//   x := 0;
//   /*h0*/      if true { _ = mf(); }
//   /*h1*/ else if true { _ = this.mf(); }
//   /*h2*/ else if true { _ = that.mf(); }
//   /*h3*/ else if true { _ = that.f; }
//   /*h4*/ else if true { _ = x.mg(); }
//   /*h5*/ else if true { _ = f() + x.g(); }
//   /*h6*/ else if true { _ = x.g() + f(); }
//   /*h7*/ else if true { _ = this.f() + x.g(); }
//   /*h8*/ else if true { _ = x.g() + this.f(); }
//   /*i0*/ else if true {
//   /*i0*/   _ = f();
//   /*i0*/   _ = x.mg();
//   /*i0*/ }
//   /*i1*/ else if true {
//   /*i1*/   _ = x.g();
//   /*i1*/   _ = mf();
//   /*i1*/ }
//   /*i2*/ else if true {
//   /*i2*/   _ = this.f();
//   /*i2*/   _ = x.mg();
//   /*i2*/ }
//   /*i3*/ else {
//   /*i3*/   _ = x.g();
//   /*i3*/   _ = this.mf();
//   /*i3*/ }
//   }
}

issue_857_5: @struct type = {
  f: (move this) = f_copy(move a);
  a: std::unique_ptr<int>;
}

issue_857_7: @struct type = {
  A: std::add_lvalue_reference_t<int>;
  this: std::monostate;
  F: (move this) = f_inout(A);
}

issue_857_8: @struct type = {
  a: std::unique_ptr<int>;
  b: move_only_function<int()>;
  c: std::add_lvalue_reference_t<int>;
  d: (move this) = { }
}
issue_857_9: @struct type = {
  this: issue_857_8;

  // Error: Cppfront limitation:
  // <https://eel.is/c++draft/class.mfct.non.static#2.sentence-1>.
//f0: (move this) = f_copy(a);
//f1: (move this) = _ = b();
  f2: (move this) = f_inout(c); // OK: Happens to work, like non-'move' 'this' parameters.
//f3: (move this) = d();

  // OK: Explicit 'this' for base members, like in templates.
  g0: (move this) = f_inout(this.a);
  //g1: (move this) = _ = this.b();
  g2: (move this) = f_inout(this.c);
  //g3: (move this) = this.d();
}

issue_869_0: @value type = {
  operator=: (out this, move _: std::unique_ptr<int>) = { }
}
issue_869_1: @union type = {
  i: issue_869_0;
}
issue_869_2: () -> (res: issue_869_1 = ()) = { res.set_i(new<int>(0)); }

issue_884: () = {
  _ = :() = {
    x := new<int>(0);
    if true { }
    {
      { f_inout(x); }
      f_copy(move x);
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      f_copy(move x);
    }
    else {
      { f_inout(x); }
      f_copy(move x);
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      f_inout(x);
    }
    else {
      { f_inout(x); }
      f_inout(x);
    }
    f_copy(move x);
  };

  _ = :() = {
    x := new<int>(0);
    f_copy(move x);
    if true {
      _ = 0;
    }
    else {
      { _ = 0; }
      _ = 0;
    }
    _ = 0;
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      f_copy(move x);
    }
    else {
      { _ = 0; }
      _ = 0;
    }
    _ = 0;
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      _ = 0;
    }
    else {
      { f_copy(move x); }
      _ = 0;
    }
    _ = 0;
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      _ = 0;
    }
    else {
      { _ = 0; }
      f_copy(move x);
    }
    _ = 0;
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      _ = 0;
    }
    else {
      { _ = 0; }
      _ = 0;
    }
    f_copy(move x);
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      f_copy(move x);
    }
    else {
      { f_copy(move x); }
      _ = 0;
    }
    _ = 0;
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      f_copy(move x);
    }
    else {
      { f_inout(x); }
      f_copy(move x);
    }
    _ = 0;
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      f_inout(x);
    }
    else {
      { f_inout(x); }
      f_inout(x);
    }
    f_inout(x);
    if true {
      f_copy(move x);
    }
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      f_inout(x);
    }
    else {
      { f_inout(x); }
      f_inout(x);
    }
    if true {
      f_inout(x);
    }
    f_copy(move x);
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    if true {
      f_copy(move x);
    }
    else {
      { f_inout(x); }
      f_inout(x);
      if true {
        f_copy(move x);
      }
    }
    _ = 0;
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      if true {
        if true {
          f_copy(move x);
        }
      }
    }
    else {
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      if true {
        if true {
          f_copy(move x);
        }
      }
    }
    else {
      f_copy(move x);
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
    }
    else {
      if true {
        if true {
          f_copy(move x);
        }
      }
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      f_copy(move x);
    }
    else {
      if true {
        if true {
          f_copy(move x);
        }
      }
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      y := new<int>(0);
      f_copy(move x);
      f_copy(move y);
    }
    else {
      if true {
        if true {
          f_inout(x);
        }
        f_copy(move x);
      }
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      y := new<int>(0);
      if true { }
      else {
        f_copy(move x);
        f_copy(move y);
      }
    }
    else {
      if true {
        if true {
          y := new<int>(0);
          f_copy(move y);
          f_inout(x);
        }
        f_copy(move x);
      }
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      y := new<int>(0);
      if true { }
      else {
        f_copy(move x);
        f_copy(move y);
      }
    }
    else {
      y := new<int>(0);
      if true {
        if true {
          f_copy(move x);
        }
        else {
          f_copy(move x);
        }
        f_copy(move y);
      }
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      f_copy(move x);
    }
    else {
      if true {
        x := new<int>(0);
        if true {
          f_inout(x);
        }
        else {
        }
        f_copy(move x);
      }
      f_copy(move x);
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      if true {
        x := new<int>(0);
        if true {
          f_inout(x);
        }
        else {
        }
        f_copy(move x);
      }
      f_copy(move x);
    }
    else {
      f_copy(move x);
    }
  };

  _ = :() = {
    x := new<int>(0);

    if true {
      f_inout(x);
    }

    if true {
      if true {
        f_copy(move x);
      }
    }
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      if true {
        f_inout(x);
        if true {
        }
        else {
          f_copy(move x);
        }
      }
      else {
        if true {
        }
        else {
          f_inout(x);
        }
        f_copy(move x);
      }
    }
    else {
      if true {
        if true {
          f_inout(x);
          f_copy(move x);
        }
        else {
        }
      }
      else {
        if true {
        }
        else {
          f_inout(x);
        }
        if true {
          f_inout(x);
          if true {
            f_copy(move x);
          }
          else {
          }
        }
        else {
          if true {
            f_copy(move x);
          }
          else {
            f_copy(move x);
          }
        }
      }
    }
  };
}

issue_888_0: (copy r: std::string, copy size: int) = {
  _ = r.size();
}
issue_888_1: (copy _: std::string, copy size: move_only_function<int(int)>) = {
  _ = 0.size();
}

issue_890: () = {
  x := new<int>(0);
//   assert(identity_copy(x)* == 0);
  (x := new<int>(0)) assert(identity(x)* == 0);
}

issue_962: (s: ::std::string) = {
  using ::std::string;
  std::cout << "A: (s)$" << std::endl;
}

draw: () = {
  pos := 0;
  vertex: move_only_function<int(int)> = ();
  _ = (pos).vertex();
}

enum_0: () = {
    underlying_type : std::string;
    if true { }
    underlying_type = "";
}
enum_1: () = {
    max_value := new<int>(0);
    min_value: std::reference_wrapper<const std::unique_ptr<int>> = max_value;

    // for  (0)
    // do   (copy x)
    // {
    //     v := new<int>(identity_copy(x));
    //     if pred(v, min_value) {
    //         min_value = std::ref(identity(v)); // Not using 'else' will never move 'v'.
    //     }
    //     if pred(v, max_value) {
    //         max_value = identity_copy(v);
    //     }
    // }

    y := new<bool>(false);
    while identity(y)* {
        v := new<int>(0);
        f_copy(move v);
    }

    z := new<bool>(false);
    do {
        v := new<int>(0);
        f_copy(move v);
    } while identity(z)*;
}
enum_2: () = {
    umax := new<int>(0);
    if pred(umax) {
    }
    else if pred(umax) {
    }
    else if pred_copy(move umax) {
    }
}

union: type = {
  destroy: (inout this) = { }
  operator=: (move this) = {
    destroy();
    _ = this;
  }
}

my_string: @struct type = {
  string: std::string;
  size: std::size_t = string.size();
}

no_pessimizing_move: () -> (ret: std::unique_ptr<int> = ()) = { }

deferred_non_copyable_0: () = {
  p: std::unique_ptr<int>;
  p = ();
  f_copy(move p);
}

deferred_non_copyable_1: () -> _ = {
  p: std::unique_ptr<int>;
  p = ();
  return (move p);
}

deferred_non_copyable_2: () -> (p: std::unique_ptr<int>) = {
  p = ();
}

loops: () = {
  _ = :() = {
    x := new<int>(0);
    for (0)
    do (_)
    f_inout(x);
  };

  _ = :() = {
    x := new<int>(0);
    for (0)
    next f_inout(x)
    do (_)
    { }
  };

  _ = :() = {
    x := new<int>(0);
    for (0)
    do (_)
    assert(x.get());
  };

  _ = :() = {
    x := new<int>(0);
    if true {
      f_copy(move x);
    }
    else {
      while true {
        f_inout(x);
      }
    }
  };
}

captures: namespace = {

// Skip non captured name in function expression

f: () = {
  x := new<int>(0);
  f_copy(move x);
  id := :(x) -> forward _ = x;
  y := new<int>(0);
  assert(id(y)& == y&);
}

x: int == 0;

t: @struct type = {
  x: std::unique_ptr<int>;
  operator(): (move this) = {
    f_copy(move x);
    _ = :() = {
      // Should this move?
      // I.e., don't skip non-captured names, just rely on skipping hiding names.
      // An odr-use still requires capturing at Cpp1-time, and capturing would move.
      static_assert(std::is_same_v<decltype(x), std::unique_ptr<int>>);
      using captures::x;
      _ = identity(x);
    };
  }
}

g: () = {
  _ = :() = {
    x := new<int>(0);
    f_copy(move x);
    _ = :() std::array<int, :(x) identity(x);(0)>()$; // Fails on Clang 12 (lambda in unevaluated context).
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    // _ = :() -> int = (:() x$*)$();
  };
}

}

loops_and_captures: () = {
  _ = :() = {
    x := new<int>(0);
    f_copy(move x);
    for (:(x) x)
    do (_)
    { }
  };

  _ = :() = {
    x := new<int>(0);
    f_copy(move x);
    for (:() -> _ = {
      using captures::x;
      return x;
    })
    do (_)
    { }
  };

//   _ = :() = {
//     x := new<int>(0);
//     for (:() x$*)
//     do (_)
//     { }
//   };
}

types: @struct type = {
  x: std::unique_ptr<int>;
//   f: (move this) = _ = :() x$*;
//   g: (move this) = {
//     for (:() x$*)
//     do (_)
//     { }
//   }
}

skip_hidden_names: () = {
  _ = :() = {
    x := new<int>(0);
    f_copy(move x);
    (copy x := new<int>(0))
      f_copy(move x);
  };

//   _ = :() = {
//     x := new<int>(0);
//     _ = :() = {
//       _ = x$;
//       x := new<int>(1);
//       _ = :() = {
//         _ = x$;
//       };
//     };
//   };

  _ = :() = {
    // x := new<int>(0);
    // f_copy(x);
    // for (0)
    // do (copy x)
    // _ = identity_copy(x);
    (copy x := new<int>(0))
      f_copy(move x);
  };

  _ = :() = {
    x := new<int>(0);
    f_inout(x);
    {
      f_copy(move x);
      using captures::x;
      f_inout(x);
    }
  };

  _ = :() = {
    x := new<int>(0);
    f_copy(move x);
    _ = :() = {
      static_assert(std::is_same_v<decltype(x), std::unique_ptr<int>>);
      using captures::x;
      f_inout(x);
    };
  };
}

main: (args) = {
  issue_683(args);
  issue_847_2(std::vector<std::unique_ptr<int>>());
  issue_847_5(args);
  issue_850();
  enum_0();
}
