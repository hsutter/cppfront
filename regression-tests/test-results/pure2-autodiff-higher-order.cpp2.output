pure2-autodiff-higher-order.cpp2...

ad_test:/* @autodiff<"order=6"> @print */ type = 
{
    add_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y;
        return;
    }

    add_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y + x;
        return;
    }

    sub_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x - y;
        return;
    }

    sub_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x - y - x;
        return;
    }

    add_sub_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y - x;
        return;
    }

    mul_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y;
        return;
    }

    mul_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y * x;
        return;
    }

    div_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x / y;
        return;
    }

    div_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x / y / y;
        return;
    }

    mul_div_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y / x;
        return;
    }

    mul_add:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * (x + y);
        return;
    }

    add_mul:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + x * y;
        return;
    }

    func:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y;
        return;
    }

    func_call:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * func(x, y);
        return;
    }

    sin_call:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = sin(x - y);
        return;
    }

    add_1_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d + y_d;
        r = x + y;
        return;
    }

    add_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d + y_d + x_d;
        r = x + y + x;
        return;
    }

    sub_1_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d - y_d;
        r = x - y;
        return;
    }

    sub_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d - y_d - x_d;
        r = x - y - x;
        return;
    }

    add_sub_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d + y_d - x_d;
        r = x + y - x;
        return;
    }

    mul_1_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d.mul(y_d, x, y);
        r = x * y;
        return;
    }

    mul_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d.mul(y_d, x, y);
        temp_1: _ = x * y;
        r_d = temp_1_d.mul(x_d, temp_1, x);
        r = temp_1 * x;
        return;
    }

    div_1_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d.div(y_d, x, y);
        r = x / y;
        return;
    }

    div_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d.div(y_d, x, y);
        temp_1: _ = x / y;
        r_d = temp_1_d.div(y_d, temp_1, y);
        r = temp_1 / y;
        return;
    }

    mul_div_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d.mul(y_d, x, y);
        temp_1: _ = x * y;
        r_d = temp_1_d.div(x_d, temp_1, x);
        r = temp_1 / x;
        return;
    }

    mul_add_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d + y_d;
        temp_1: _ = x + y;
        r_d = x_d.mul(temp_1_d, x, temp_1);
        r = x * temp_1;
        return;
    }

    add_mul_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d.mul(y_d, x, y);
        temp_1: _ = x * y;
        r_d = x_d + temp_1_d;
        r = x + temp_1;
        return;
    }

    func_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d + y_d;
        r = x + y;
        return;
    }

    func_call_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        temp_2: _ = func_d(x, x_d, y, y_d);
        temp_1: _ = temp_2.r;
        temp_1_d: _ = temp_2.r_d;
        r_d = x_d.mul(temp_1_d, x, temp_1);
        r = x * temp_1;
        return;
    }

    sin_call_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d - y_d;
        temp_1: _ = x - y;
        r_d = temp_1_d.sin(temp_1);
        r = sin(temp_1);
        return;
    }
}
 ok (all Cpp2, passes safety checks)

