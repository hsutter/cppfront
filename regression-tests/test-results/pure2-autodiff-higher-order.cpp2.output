pure2-autodiff-higher-order.cpp2...

ad_test:/* @autodiff<"order=6"> @print */ type = 
{
    add_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y;
        return;
    }

    add_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y + x;
        return;
    }

    sub_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x - y;
        return;
    }

    sub_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x - y - x;
        return;
    }

    add_sub_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y - x;
        return;
    }

    add_1_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d + y_d;
        r = x + y;
        return;
    }

    add_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d + y_d + x_d;
        r = x + y + x;
        return;
    }

    sub_1_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d - y_d;
        r = x - y;
        return;
    }

    sub_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d - y_d - x_d;
        r = x - y - x;
        return;
    }

    add_sub_2_d:(
        in x: double, 
        in x_d: cpp2::taylor<double, 6>, 
        in y: double, 
        in y_d: cpp2::taylor<double, 6>, 
    ) -> (
            out r: double = 0.0, 
            out r_d: cpp2::taylor<double, 6> = 0.0, 
        ) = 
    {
        r_d = x_d + y_d - x_d;
        r = x + y - x;
        return;
    }
}
 ok (all Cpp2, passes safety checks)

