pure2-autodiff.cpp2...

ad_test:/* @autodiff @print */ type = 
{
    add_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y;
        return;
    }

    add_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y + x;
        return;
    }

    sub_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x - y;
        return;
    }

    sub_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x - y - x;
        return;
    }

    add_sub_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y - x;
        return;
    }

    mul_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y;
        return;
    }

    mul_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y * x;
        return;
    }

    div_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x / y;
        return;
    }

    div_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x / y / y;
        return;
    }

    mul_div_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y / x;
        return;
    }

    mul_add:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * (x + y);
        return;
    }

    add_mul:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + x * y;
        return;
    }

    func:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y;
        return;
    }

    func_call:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * func(x, y);
        return;
    }

    sin_call:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = sin(x - y);
        return;
    }

    if_branch:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x;
        if x < 0.0
        {
            r = y;
        }
        return;
    }

    if_else_branch:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        if x < 0.0
        {
            r = y;
        }
        else 
        {
            r = x;
        }
        return;
    }

    direct_return:(
        in x: double, 
        in y: double, 
    ) -> move double = 
    {
        return x + y;
    }

    intermediate_var:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        t: double = ();
        t = x + y;
        r = t;
        return;
    }

    intermediate_passive_var:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        i: int = ();
        r = x + y;
        i = 2;
        _ = i;
        return;
    }

    intermediate_untyped:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        t: _ = 0.0;
        t = x + y;
        r = t;
        return;
    }

    while_loop:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        i: int = 0;
        r = x;
        while i < 2
        next (i += 1)
            {
                r = r + y;
            }
        return;
    }

    do_while_loop:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        i: int = 0;
        r = x;
        do 
            {
                r = r + y;
            }
        next (i += 1)
        while i < 2;
        return;
    }

    for_loop:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        v: std::vector<double> = ();
        v.push_back(x);
        v.push_back(y);
        r = 0.0;
        for v
        do (in t: _)
            {
                r = r + t;
            }
        return;
    }

    add_1_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d + y_d;
        r = x + y;
        return;
    }

    add_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d + y_d + x_d;
        r = x + y + x;
        return;
    }

    sub_1_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d - y_d;
        r = x - y;
        return;
    }

    sub_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d - y_d - x_d;
        r = x - y - x;
        return;
    }

    add_sub_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d + y_d - x_d;
        r = x + y - x;
        return;
    }

    mul_1_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x * y_d + y * x_d;
        r = x * y;
        return;
    }

    mul_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x * y_d + y * x_d;
        temp_1: _ = x * y;
        r_d = temp_1 * x_d + x * temp_1_d;
        r = temp_1 * x;
        return;
    }

    div_1_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d / y - x * y_d / (y * y);
        r = x / y;
        return;
    }

    div_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d / y - x * y_d / (y * y);
        temp_1: _ = x / y;
        r_d = temp_1_d / y - temp_1 * y_d / (y * y);
        r = temp_1 / y;
        return;
    }

    mul_div_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x * y_d + y * x_d;
        temp_1: _ = x * y;
        r_d = temp_1_d / x - temp_1 * x_d / (x * x);
        r = temp_1 / x;
        return;
    }

    mul_add_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d + y_d;
        temp_1: _ = x + y;
        r_d = x * temp_1_d + temp_1 * x_d;
        r = x * temp_1;
        return;
    }

    add_mul_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x * y_d + y * x_d;
        temp_1: _ = x * y;
        r_d = x_d + temp_1_d;
        r = x + temp_1;
        return;
    }

    func_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d + y_d;
        r = x + y;
        return;
    }

    func_call_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_2: _ = func_diff(x, x_d, y, y_d);
        temp_1: _ = temp_2.r;
        temp_1_d: _ = temp_2.r_d;
        r_d = x * temp_1_d + temp_1 * x_d;
        r = x * temp_1;
        return;
    }

    sin_call_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d - y_d;
        temp_1: _ = x - y;
        r_d = cos(temp_1) * temp_1_d;
        r = sin(temp_1);
        return;
    }

    if_branch_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d;
        r = x;
        if x < 0.0
        {
            r_d = y_d;
            r = y;
        }
        else 
        {
        }
        return;
    }

    if_else_branch_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        if x < 0.0
        {
            r_d = y_d;
            r = y;
        }
        else 
        {
            r_d = x_d;
            r = x;
        }
        return;
    }

    direct_return_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = (), 
            out r_d: double = (), 
        ) = 
    {
        r_d = x_d + y_d;
        r = x + y;
        return;
    }

    intermediate_var_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        t_d: double = ();
        t: double = ();
        t_d = x_d + y_d;
        t = x + y;
        r_d = t_d;
        r = t;
        return;
    }

    intermediate_passive_var_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        i_d: int = ();
        i: int = ();
        r_d = x_d + y_d;
        r = x + y;
        i_d = ();
        i = 2;
        _ = i_d;
        _ = i;
        return;
    }

    intermediate_untyped_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        t_d: _ = 0.0;
        t: _ = 0.0;
        t_d = x_d + y_d;
        t = x + y;
        r_d = t_d;
        r = t;
        return;
    }

    while_loop_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        i_d: int = 0;
        i: int = 0;
        r_d = x_d;
        r = x;
        while i < 2
        next (i += 1)
            {
                r_d = r_d + y_d;
                r = r + y;
            }
        return;
    }

    do_while_loop_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        i_d: int = 0;
        i: int = 0;
        r_d = x_d;
        r = x;
        do 
            {
                r_d = r_d + y_d;
                r = r + y;
            }
        next (i += 1)
        while i < 2;
        return;
    }

    for_loop_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        v_d: std::vector<double> = ();
        v: std::vector<double> = ();
        v.push_back(x);
        v_d.push_back(x_d);
        v.push_back(y);
        v_d.push_back(y_d);
        r_d = ();
        r = 0.0;
        (copy t_d_iter: _ = v_d.begin(), )
        for v
        next (t_d_iter++)
        do (in t: _)
            {
                (in t_d: _ = t_d_iter*, )
                {
                    r_d = r_d + t_d;
                    r = r + t;
                }
            }
        return;
    }
}
 ok (all Cpp2, passes safety checks)

