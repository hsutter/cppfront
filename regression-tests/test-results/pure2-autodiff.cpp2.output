pure2-autodiff.cpp2...

ad_test:/* @autodiff @print */ type = 
{
    add_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y;
        return;
    }

    add_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y + x;
        return;
    }

    sub_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x - y;
        return;
    }

    sub_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x - y - x;
        return;
    }

    add_sub_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y - x;
        return;
    }

    mul_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y;
        return;
    }

    mul_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y * x;
        return;
    }

    div_1:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x / y;
        return;
    }

    div_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x / y / y;
        return;
    }

    mul_div_2:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * y / x;
        return;
    }

    mul_add:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * (x + y);
        return;
    }

    add_mul:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + x * y;
        return;
    }

    func:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x + y;
        return;
    }

    func_call:(
        in x: double, 
        in y: double, 
    ) -> (out r: double, ) = 
    {
        r = x * func(x, y);
        return;
    }

    add_1_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d + y_d;
        r = x + y;
        return;
    }

    add_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d + y_d + x_d;
        r = x + y + x;
        return;
    }

    sub_1_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d - y_d;
        r = x - y;
        return;
    }

    sub_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d - y_d - x_d;
        r = x - y - x;
        return;
    }

    add_sub_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d + y_d - x_d;
        r = x + y - x;
        return;
    }

    mul_1_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x * y_d + y * x_d;
        r = x * y;
        return;
    }

    mul_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x * y_d + y * x_d;
        temp_1: _ = x * y;
        r_d = temp_1 * x_d + x * temp_1_d;
        r = temp_1 * x;
        return;
    }

    div_1_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d / y - x * y_d / (y * y);
        r = x / y;
        return;
    }

    div_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d / y - x * y_d / (y * y);
        temp_1: _ = x / y;
        r_d = temp_1_d / y - temp_1 * y_d / (y * y);
        r = temp_1 / y;
        return;
    }

    mul_div_2_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x * y_d + y * x_d;
        temp_1: _ = x * y;
        r_d = temp_1_d / x - temp_1 * x_d / (x * x);
        r = temp_1 / x;
        return;
    }

    mul_add_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x_d + y_d;
        temp_1: _ = x + y;
        r_d = x * temp_1_d + temp_1 * x_d;
        r = x * temp_1;
        return;
    }

    add_mul_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_1_d: _ = x * y_d + y * x_d;
        temp_1: _ = x * y;
        r_d = x_d + temp_1_d;
        r = x + temp_1;
        return;
    }

    func_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        r_d = x_d + y_d;
        r = x + y;
        return;
    }

    func_call_diff:(
        in x: double, 
        in x_d: double, 
        in y: double, 
        in y_d: double, 
    ) -> (
            out r: double = 0.0, 
            out r_d: double = 0.0, 
        ) = 
    {
        temp_2: _ = func_diff(x, x_d, y, y_d);
        temp_1: _ = temp_2.r;
        temp_1_d: _ = temp_2.r_d;
        r_d = x * temp_1_d + temp_1 * x_d;
        r = x * temp_1;
        return;
    }
}
 ok (all Cpp2, passes safety checks)

