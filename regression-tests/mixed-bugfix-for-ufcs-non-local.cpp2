namespace ns {

template<bool> struct t { };
constexpr bool f(const t<true>&) { return true; }
constexpr t<true> o{};

} // namespace ns

ns: namespace = {

// Variables.

v0: <_: t<o.f()>> bool == false; // Fails on GCC ([GCC109781][]) and Clang 12 (a lambda expression cannot appear in this context)

v1: t<o.f()> == t<true>(); // Fails on Clang 12 (lambda in unevaluated context).

v2: bool == o.f();

// Functions.

g: <_: t<o.f()>> () = { } // Fails on GCC ([GCC109781][]) and Clang 12 (a lambda expression cannot appear in this context)

g: (_: t<o.f()>) = { } // Fails on Clang 12 (lambda in unevaluated context).

g: () pre(o.f()) = { }

h: () -> t<o.f()> = o; // Fails on Clang 12 (lambda in unevaluated context).

// Aliases.

a: <_: t<o.f()>> type == bool; // Fails on GCC ([GCC109781][]) and Clang 12 (a lambda expression cannot appear in this context)

b: <_: t<o.f()>> _ == false; // Fails on GCC ([GCC109781][]).

c: type == t<o.f()>; // Fails on Clang 12 (lambda in unevaluated context) and Clang 12 (a lambda expression cannot appear in this context)

d: _ == t<o.f()>(); // Fails on Clang 12 (lambda in unevaluated context).

u: @struct type = {
  b: bool == o.f();
  c: bool == :(forward x: decltype(o.f())) = x;(true); // Fails on Clang 12 (lambda in unevaluated context).
  g: (s, sz) pre(s.sz() != 0) = { }
}

} // namespace ns

main: () = { }

// [GCC109781]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=109781
