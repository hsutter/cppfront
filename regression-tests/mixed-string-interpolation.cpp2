#include <iostream>
#include <string_view>
#include <utility> // std::pair
#include <tuple>
#include <vector>
#include <map>
#include <unordered_set>

const char carr[] = "carray test";

main: () -> int = {
    a := 2;
    b: std::optional<int> = ();
    std::cout << "a = (a)$, b = (b)$\n";

    b = 42;
    std::cout << "a^2 + b = (a * a + b.value())$\n";

    std::cout << "carr = (carr)$\n";    

    sv : std::string_view = "SV works!";
    std::cout << "sv = (sv)$\n";
  
    osv : std::optional<std::string_view> = ();
    std::cout << "osv = (osv)$\n";
    osv = "It works, too";
    std::cout << "osv = (osv)$\n";

    p : std::pair<std::string_view, std::optional<std::string>> = ("first", std::nullopt);
    std::cout << "p = (p)$\n";
    p.second = "second";
    std::cout << "p = (p)$\n";

    t : std::tuple<double, std::optional<std::pair<std::string_view, int>>, std::optional<std::tuple<int, int, int>>> = (3.14, std::nullopt, std::nullopt);
    std::cout << "t = (t)$\n";
    std::get<1>(t) = std::pair(std::string_view("answer"), 42);
    std::cout << "t = (t)$\n";
    std::get<2>(t) = std::make_tuple(2022,10,1);
    std::cout << "t = (t)$\n";

    v : std::vector<int> = (1,2,3,4,5);
    std::cout << "v = (v)$\n";

    m : std::map<std::string, int> = (std::pair("A", 1), std::pair("B", 2), std::pair("C", 3));
    std::cout << "m = (m)$\n";

    us : std::unordered_set<int> = (1,2,3,2,3,4,5,2,3,1,2,3,4,5);
    std::cout << "us = (us)$\n";

    ums : std::unordered_multiset<int> = (1,2,3,2,3,4,5,2,3,1,2,3,4,5);
    std::cout << "ums = (ums)$\n";

    mix : std::vector = (std::optional(std::make_tuple(v,m,us)));
    std::cout << "mix = (mix)$\n";
}
