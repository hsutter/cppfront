create_result: (resultExpr: std::string, r) -> std::string = {
  result: std::string = "";

  get_next := :(iter) -> _ = {
		start := std::distance(resultExpr&$*.cbegin(), iter);
    firstDollar := resultExpr&$*.find("$", start);
    firstAt := resultExpr&$*.find("@", start);

		end := std::min(firstDollar, firstAt);
		if end != std::string::npos {
			return resultExpr&$*.cbegin() + end;
		}
		else {
			return resultExpr&$*.cend();
		}
  };
  extract_group_and_advance := :(inout iter) -> _ = {
    start := iter;

    while std::isdigit(iter*) next iter++ {}

    return std::stoi(std::string(start, iter));
  };
  extract_until := :(inout iter, to: char) -> _ = {
    start := iter;

    while (to != iter*) next iter++ {} // TODO: Without bracket: error: postfix unary * (dereference) cannot be immediately followed by a (, identifier, or literal - add whitespace before * here if you meant binary * (multiplication)

    return std::string(start, iter);
  };

  iter := resultExpr.begin();

  while iter != resultExpr.end() {
    next := get_next(iter);

    if next != iter {
      result += std::string(iter, next);
    }
    if next != resultExpr.end() {
      if next* == '$' {
        next++;

        if next* == '&' {
          next++;
          result += r.group(0);
        }
        else if next* == '-' || next* == '+' {
          is_start := next* == '-';
          next++;
          if next* == '{' {
            next++; // Skip {
            group := extract_until(next, '}');
            next++; // Skip }
            result += r.group(group);
          }
          else if next* == '[' {
            next++; // Skip [
            group := extract_group_and_advance(next);
            next++; // Skip ]

            if is_start {
              result += std::to_string(r.group_start(group));
            }
            else {
              result += std::to_string(r.group_end(group));
            }
          }
          else {
            // Return max group
            result += r.group(r.group_number() - 1);
          }
        }
        else if std::isdigit(next*) {
          group := extract_group_and_advance(next);
          result += r.group(group);
        }
        else {
          std::cerr << "Not implemented";
        }
      }
      else if next* == '@' {
        next++;
        
        if next* == '-'  || next* == '+' {
          i := 0;
          while i < cpp2::unchecked_narrow<int>(r.group_number()) next i++ {
            pos := 0;
            if next* == '-' {
              pos = r.group_start(i);
            }
            else {
              pos = r.group_end(i);
            }
            result +=  std::to_string(pos);
          }
        }
        else {
          std::cerr << "Not implemented";
        }
      }
      else {
        std::cerr << "Not implemented.";
      }
    }
    iter = next;
  }

  return result;
}

sanitize: (copy str: std::string) -> std::string =
{
  str = cpp2::string_util::replace_all(str, "\a", "\\a");
  str = cpp2::string_util::replace_all(str, "\f", "\\f");
  str = cpp2::string_util::replace_all(str, "\x1b", "\\e");
  str = cpp2::string_util::replace_all(str, "\n", "\\n");
  str = cpp2::string_util::replace_all(str, "\r", "\\r");
  str = cpp2::string_util::replace_all(str, "\t", "\\t");

  return str;
}

test: <M> (regex: M, id: std::string, regex_str: std::string, str: std::string, kind: std::string, resultExpr: std::string,
           resultExpected: std::string) = {
  
  warning: std::string = "";
  if regex.to_string() != regex_str {
    warning = "Warning: Parsed regex does not match.";
  }

  status: std::string = "OK";

  r := regex.search(str);

  if "y" == kind || "yM" == kind || "yS" == kind || "yB" == kind {
    if !r.matched {
      status = "Failure: Regex should apply.";
    }
    else {
      // Have a match check the result

      result := create_result(resultExpr, r);

      if result != resultExpected {
        status = "Failure: Result is wrong. (is: (sanitize(result))$)";
      }
    }
  }
  else if "n" == kind {
    if r.matched {
      status = "Failure: Regex should not apply. Result is '(r.group(0))$'";
    }
  } else {
    status = "Unknown kind '(kind)$'";
  }

  if !warning.empty() {
    warning += " ";
  }
  std::cout << "(id)$_(kind)$: (status)$ (warning)$regex: (regex_str)$ parsed_regex: (regex.to_string())$ str: (sanitize(str))$ result_expr: (resultExpr)$ expected_results (sanitize(resultExpected))$" << std::endl;
}


test_tests_14_multiline_modifier: @regex type = {
  regex_01 := R"(\Z)";
  regex_02 := R"(\z)";
  regex_03 := R"($)";
  regex_04 := R"(\Z)";
  regex_05 := R"(\z)";
  regex_06 := R"($)";
  regex_07 := R"(\Z)";
  regex_08 := R"(\z)";
  regex_09 := R"($)";
  regex_10 := R"('\Z'm)";
  regex_11 := R"('\z'm)";
  regex_12 := R"('$'m)";
  regex_13 := R"('\Z'm)";
  regex_14 := R"('\z'm)";
  regex_15 := R"('$'m)";
  regex_16 := R"('\Z'm)";
  regex_17 := R"('\z'm)";
  regex_18 := R"('$'m)";
  regex_19 := R"(a\Z)";
  regex_20 := R"(a\z)";
  regex_21 := R"(a$)";
  regex_22 := R"(a\Z)";
  regex_23 := R"(a\z)";
  regex_24 := R"(a$)";
  regex_25 := R"(a\Z)";
  regex_26 := R"(a\z)";
  regex_27 := R"(a$)";
  regex_28 := R"('a\Z'm)";
  regex_29 := R"('a\z'm)";
  regex_30 := R"('a$'m)";
  regex_31 := R"('a\Z'm)";
  regex_32 := R"('a\z'm)";
  regex_33 := R"('a$'m)";
  regex_34 := R"('a\Z'm)";
  regex_35 := R"('a\z'm)";
  regex_36 := R"('a$'m)";
  regex_37 := R"(aa\Z)";
  regex_38 := R"(aa\z)";
  regex_39 := R"(aa$)";
  regex_40 := R"(aa\Z)";
  regex_41 := R"(aa\z)";
  regex_42 := R"(aa$)";
  regex_43 := R"(aa\Z)";
  regex_44 := R"(aa\z)";
  regex_45 := R"(aa$)";
  regex_46 := R"('aa\Z'm)";
  regex_47 := R"('aa\z'm)";
  regex_48 := R"('aa$'m)";
  regex_49 := R"('aa\Z'm)";
  regex_50 := R"('aa\z'm)";
  regex_51 := R"('aa$'m)";
  regex_52 := R"('aa\Z'm)";
  regex_53 := R"('aa\z'm)";
  regex_54 := R"('aa$'m)";
  regex_55 := R"(aa\Z)";
  regex_56 := R"(aa\z)";
  regex_57 := R"(aa$)";
  regex_58 := R"(aa\Z)";
  regex_59 := R"(aa\z)";
  regex_60 := R"(aa$)";
  regex_61 := R"(aa\Z)";
  regex_62 := R"(aa\z)";
  regex_63 := R"(aa$)";
  regex_64 := R"('aa\Z'm)";
  regex_65 := R"('aa\z'm)";
  regex_66 := R"('aa$'m)";
  regex_67 := R"('aa\Z'm)";
  regex_68 := R"('aa\z'm)";
  regex_69 := R"('aa$'m)";
  regex_70 := R"('aa\Z'm)";
  regex_71 := R"('aa\z'm)";
  regex_72 := R"('aa$'m)";
  regex_73 := R"(aa\Z)";
  regex_74 := R"(aa\z)";
  regex_75 := R"(aa$)";
  regex_76 := R"(aa\Z)";
  regex_77 := R"(aa\z)";
  regex_78 := R"(aa$)";
  regex_79 := R"(aa\Z)";
  regex_80 := R"(aa\z)";
  regex_81 := R"(aa$)";
  regex_82 := R"('aa\Z'm)";
  regex_83 := R"('aa\z'm)";
  regex_84 := R"('aa$'m)";
  regex_85 := R"('aa\Z'm)";
  regex_86 := R"('aa\z'm)";
  regex_87 := R"('aa$'m)";
  regex_88 := R"('aa\Z'm)";
  regex_89 := R"('aa\z'm)";
  regex_90 := R"('aa$'m)";
  regex_91 := R"(ab\Z)";
  regex_92 := R"(ab\z)";
  regex_93 := R"(ab$)";
  regex_94 := R"(ab\Z)";
  regex_95 := R"(ab\z)";
  regex_96 := R"(ab$)";
  regex_97 := R"(ab\Z)";
  regex_98 := R"(ab\z)";
  regex_99 := R"(ab$)";
  regex_100 := R"('ab\Z'm)";
  regex_101 := R"('ab\z'm)";
  regex_102 := R"('ab$'m)";
  regex_103 := R"('ab\Z'm)";
  regex_104 := R"('ab\z'm)";
  regex_105 := R"('ab$'m)";
  regex_106 := R"('ab\Z'm)";
  regex_107 := R"('ab\z'm)";
  regex_108 := R"('ab$'m)";
  regex_109 := R"(ab\Z)";
  regex_110 := R"(ab\z)";
  regex_111 := R"(ab$)";
  regex_112 := R"(ab\Z)";
  regex_113 := R"(ab\z)";
  regex_114 := R"(ab$)";
  regex_115 := R"(ab\Z)";
  regex_116 := R"(ab\z)";
  regex_117 := R"(ab$)";
  regex_118 := R"('ab\Z'm)";
  regex_119 := R"('ab\z'm)";
  regex_120 := R"('ab$'m)";
  regex_121 := R"('ab\Z'm)";
  regex_122 := R"('ab\z'm)";
  regex_123 := R"('ab$'m)";
  regex_124 := R"('ab\Z'm)";
  regex_125 := R"('ab\z'm)";
  regex_126 := R"('ab$'m)";
  regex_127 := R"(ab\Z)";
  regex_128 := R"(ab\z)";
  regex_129 := R"(ab$)";
  regex_130 := R"(ab\Z)";
  regex_131 := R"(ab\z)";
  regex_132 := R"(ab$)";
  regex_133 := R"(ab\Z)";
  regex_134 := R"(ab\z)";
  regex_135 := R"(ab$)";
  regex_136 := R"('ab\Z'm)";
  regex_137 := R"('ab\z'm)";
  regex_138 := R"('ab$'m)";
  regex_139 := R"('ab\Z'm)";
  regex_140 := R"('ab\z'm)";
  regex_141 := R"('ab$'m)";
  regex_142 := R"('ab\Z'm)";
  regex_143 := R"('ab\z'm)";
  regex_144 := R"('ab$'m)";
  regex_145 := R"(abb\Z)";
  regex_146 := R"(abb\z)";
  regex_147 := R"(abb$)";
  regex_148 := R"(abb\Z)";
  regex_149 := R"(abb\z)";
  regex_150 := R"(abb$)";
  regex_151 := R"(abb\Z)";
  regex_152 := R"(abb\z)";
  regex_153 := R"(abb$)";
  regex_154 := R"('abb\Z'm)";
  regex_155 := R"('abb\z'm)";
  regex_156 := R"('abb$'m)";
  regex_157 := R"('abb\Z'm)";
  regex_158 := R"('abb\z'm)";
  regex_159 := R"('abb$'m)";
  regex_160 := R"('abb\Z'm)";
  regex_161 := R"('abb\z'm)";
  regex_162 := R"('abb$'m)";
  regex_163 := R"(abb\Z)";
  regex_164 := R"(abb\z)";
  regex_165 := R"(abb$)";
  regex_166 := R"(abb\Z)";
  regex_167 := R"(abb\z)";
  regex_168 := R"(abb$)";
  regex_169 := R"(abb\Z)";
  regex_170 := R"(abb\z)";
  regex_171 := R"(abb$)";
  regex_172 := R"('abb\Z'm)";
  regex_173 := R"('abb\z'm)";
  regex_174 := R"('abb$'m)";
  regex_175 := R"('abb\Z'm)";
  regex_176 := R"('abb\z'm)";
  regex_177 := R"('abb$'m)";
  regex_178 := R"('abb\Z'm)";
  regex_179 := R"('abb\z'm)";
  regex_180 := R"('abb$'m)";
  regex_181 := R"(abb\Z)";
  regex_182 := R"(abb\z)";
  regex_183 := R"(abb$)";
  regex_184 := R"(abb\Z)";
  regex_185 := R"(abb\z)";
  regex_186 := R"(abb$)";
  regex_187 := R"(abb\Z)";
  regex_188 := R"(abb\z)";
  regex_189 := R"(abb$)";
  regex_190 := R"('abb\Z'm)";
  regex_191 := R"('abb\z'm)";
  regex_192 := R"('abb$'m)";
  regex_193 := R"('abb\Z'm)";
  regex_194 := R"('abb\z'm)";
  regex_195 := R"('abb$'m)";
  regex_196 := R"('abb\Z'm)";
  regex_197 := R"('abb\z'm)";
  regex_198 := R"('abb$'m)";
  regex_199 := R"('\Aa$'m)";
  run: (this) = {
    std::cout << "Running tests_14_multiline_modifier:"<< std::endl;
    test(regex_01, "01", R"(\Z)", "a\nb\n", "y", R"($-[0])", "3");
    test(regex_02, "02", R"(\z)", "a\nb\n", "y", R"($-[0])", "4");
    test(regex_03, "03", R"($)", "a\nb\n", "y", R"($-[0])", "3");
    test(regex_04, "04", R"(\Z)", "b\na\n", "y", R"($-[0])", "3");
    test(regex_05, "05", R"(\z)", "b\na\n", "y", R"($-[0])", "4");
    test(regex_06, "06", R"($)", "b\na\n", "y", R"($-[0])", "3");
    test(regex_07, "07", R"(\Z)", "b\na", "y", R"($-[0])", "3");
    test(regex_08, "08", R"(\z)", "b\na", "y", R"($-[0])", "3");
    test(regex_09, "09", R"($)", "b\na", "y", R"($-[0])", "3");
    test(regex_10, "10", R"('\Z'm)", "a\nb\n", "y", R"($-[0])", "3");
    test(regex_11, "11", R"('\z'm)", "a\nb\n", "y", R"($-[0])", "4");
    test(regex_12, "12", R"('$'m)", "a\nb\n", "y", R"($-[0])", "1");
    test(regex_13, "13", R"('\Z'm)", "b\na\n", "y", R"($-[0])", "3");
    test(regex_14, "14", R"('\z'm)", "b\na\n", "y", R"($-[0])", "4");
    test(regex_15, "15", R"('$'m)", "b\na\n", "y", R"($-[0])", "1");
    test(regex_16, "16", R"('\Z'm)", "b\na", "y", R"($-[0])", "3");
    test(regex_17, "17", R"('\z'm)", "b\na", "y", R"($-[0])", "3");
    test(regex_18, "18", R"('$'m)", "b\na", "y", R"($-[0])", "1");
    test(regex_19, "19", R"(a\Z)", "a\nb\n", "n", R"(-)", "-");
    test(regex_20, "20", R"(a\z)", "a\nb\n", "n", R"(-)", "-");
    test(regex_21, "21", R"(a$)", "a\nb\n", "n", R"(-)", "-");
    test(regex_22, "22", R"(a\Z)", "b\na\n", "y", R"($-[0])", "2");
    test(regex_23, "23", R"(a\z)", "b\na\n", "n", R"(-)", "-");
    test(regex_24, "24", R"(a$)", "b\na\n", "y", R"($-[0])", "2");
    test(regex_25, "25", R"(a\Z)", "b\na", "y", R"($-[0])", "2");
    test(regex_26, "26", R"(a\z)", "b\na", "y", R"($-[0])", "2");
    test(regex_27, "27", R"(a$)", "b\na", "y", R"($-[0])", "2");
    test(regex_28, "28", R"('a\Z'm)", "a\nb\n", "n", R"(-)", "-");
    test(regex_29, "29", R"('a\z'm)", "a\nb\n", "n", R"(-)", "-");
    test(regex_30, "30", R"('a$'m)", "a\nb\n", "y", R"($-[0])", "0");
    test(regex_31, "31", R"('a\Z'm)", "b\na\n", "y", R"($-[0])", "2");
    test(regex_32, "32", R"('a\z'm)", "b\na\n", "n", R"(-)", "-");
    test(regex_33, "33", R"('a$'m)", "b\na\n", "y", R"($-[0])", "2");
    test(regex_34, "34", R"('a\Z'm)", "b\na", "y", R"($-[0])", "2");
    test(regex_35, "35", R"('a\z'm)", "b\na", "y", R"($-[0])", "2");
    test(regex_36, "36", R"('a$'m)", "b\na", "y", R"($-[0])", "2");
    test(regex_37, "37", R"(aa\Z)", "aa\nb\n", "n", R"(-)", "-");
    test(regex_38, "38", R"(aa\z)", "aa\nb\n", "n", R"(-)", "-");
    test(regex_39, "39", R"(aa$)", "aa\nb\n", "n", R"(-)", "-");
    test(regex_40, "40", R"(aa\Z)", "b\naa\n", "y", R"($-[0])", "2");
    test(regex_41, "41", R"(aa\z)", "b\naa\n", "n", R"(-)", "-");
    test(regex_42, "42", R"(aa$)", "b\naa\n", "y", R"($-[0])", "2");
    test(regex_43, "43", R"(aa\Z)", "b\naa", "y", R"($-[0])", "2");
    test(regex_44, "44", R"(aa\z)", "b\naa", "y", R"($-[0])", "2");
    test(regex_45, "45", R"(aa$)", "b\naa", "y", R"($-[0])", "2");
    test(regex_46, "46", R"('aa\Z'm)", "aa\nb\n", "n", R"(-)", "-");
    test(regex_47, "47", R"('aa\z'm)", "aa\nb\n", "n", R"(-)", "-");
    test(regex_48, "48", R"('aa$'m)", "aa\nb\n", "y", R"($-[0])", "0");
    test(regex_49, "49", R"('aa\Z'm)", "b\naa\n", "y", R"($-[0])", "2");
    test(regex_50, "50", R"('aa\z'm)", "b\naa\n", "n", R"(-)", "-");
    test(regex_51, "51", R"('aa$'m)", "b\naa\n", "y", R"($-[0])", "2");
    test(regex_52, "52", R"('aa\Z'm)", "b\naa", "y", R"($-[0])", "2");
    test(regex_53, "53", R"('aa\z'm)", "b\naa", "y", R"($-[0])", "2");
    test(regex_54, "54", R"('aa$'m)", "b\naa", "y", R"($-[0])", "2");
    test(regex_55, "55", R"(aa\Z)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_56, "56", R"(aa\z)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_57, "57", R"(aa$)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_58, "58", R"(aa\Z)", "b\nac\n", "n", R"(-)", "-");
    test(regex_59, "59", R"(aa\z)", "b\nac\n", "n", R"(-)", "-");
    test(regex_60, "60", R"(aa$)", "b\nac\n", "n", R"(-)", "-");
    test(regex_61, "61", R"(aa\Z)", "b\nac", "n", R"(-)", "-");
    test(regex_62, "62", R"(aa\z)", "b\nac", "n", R"(-)", "-");
    test(regex_63, "63", R"(aa$)", "b\nac", "n", R"(-)", "-");
    test(regex_64, "64", R"('aa\Z'm)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_65, "65", R"('aa\z'm)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_66, "66", R"('aa$'m)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_67, "67", R"('aa\Z'm)", "b\nac\n", "n", R"(-)", "-");
    test(regex_68, "68", R"('aa\z'm)", "b\nac\n", "n", R"(-)", "-");
    test(regex_69, "69", R"('aa$'m)", "b\nac\n", "n", R"(-)", "-");
    test(regex_70, "70", R"('aa\Z'm)", "b\nac", "n", R"(-)", "-");
    test(regex_71, "71", R"('aa\z'm)", "b\nac", "n", R"(-)", "-");
    test(regex_72, "72", R"('aa$'m)", "b\nac", "n", R"(-)", "-");
    test(regex_73, "73", R"(aa\Z)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_74, "74", R"(aa\z)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_75, "75", R"(aa$)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_76, "76", R"(aa\Z)", "b\nca\n", "n", R"(-)", "-");
    test(regex_77, "77", R"(aa\z)", "b\nca\n", "n", R"(-)", "-");
    test(regex_78, "78", R"(aa$)", "b\nca\n", "n", R"(-)", "-");
    test(regex_79, "79", R"(aa\Z)", "b\nca", "n", R"(-)", "-");
    test(regex_80, "80", R"(aa\z)", "b\nca", "n", R"(-)", "-");
    test(regex_81, "81", R"(aa$)", "b\nca", "n", R"(-)", "-");
    test(regex_82, "82", R"('aa\Z'm)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_83, "83", R"('aa\z'm)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_84, "84", R"('aa$'m)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_85, "85", R"('aa\Z'm)", "b\nca\n", "n", R"(-)", "-");
    test(regex_86, "86", R"('aa\z'm)", "b\nca\n", "n", R"(-)", "-");
    test(regex_87, "87", R"('aa$'m)", "b\nca\n", "n", R"(-)", "-");
    test(regex_88, "88", R"('aa\Z'm)", "b\nca", "n", R"(-)", "-");
    test(regex_89, "89", R"('aa\z'm)", "b\nca", "n", R"(-)", "-");
    test(regex_90, "90", R"('aa$'m)", "b\nca", "n", R"(-)", "-");
    test(regex_91, "91", R"(ab\Z)", "ab\nb\n", "n", R"(-)", "-");
    test(regex_92, "92", R"(ab\z)", "ab\nb\n", "n", R"(-)", "-");
    test(regex_93, "93", R"(ab$)", "ab\nb\n", "n", R"(-)", "-");
    test(regex_94, "94", R"(ab\Z)", "b\nab\n", "y", R"($-[0])", "2");
    test(regex_95, "95", R"(ab\z)", "b\nab\n", "n", R"(-)", "-");
    test(regex_96, "96", R"(ab$)", "b\nab\n", "y", R"($-[0])", "2");
    test(regex_97, "97", R"(ab\Z)", "b\nab", "y", R"($-[0])", "2");
    test(regex_98, "98", R"(ab\z)", "b\nab", "y", R"($-[0])", "2");
    test(regex_99, "99", R"(ab$)", "b\nab", "y", R"($-[0])", "2");
    test(regex_100, "100", R"('ab\Z'm)", "ab\nb\n", "n", R"(-)", "-");
    test(regex_101, "101", R"('ab\z'm)", "ab\nb\n", "n", R"(-)", "-");
    test(regex_102, "102", R"('ab$'m)", "ab\nb\n", "y", R"($-[0])", "0");
    test(regex_103, "103", R"('ab\Z'm)", "b\nab\n", "y", R"($-[0])", "2");
    test(regex_104, "104", R"('ab\z'm)", "b\nab\n", "n", R"(-)", "-");
    test(regex_105, "105", R"('ab$'m)", "b\nab\n", "y", R"($-[0])", "2");
    test(regex_106, "106", R"('ab\Z'm)", "b\nab", "y", R"($-[0])", "2");
    test(regex_107, "107", R"('ab\z'm)", "b\nab", "y", R"($-[0])", "2");
    test(regex_108, "108", R"('ab$'m)", "b\nab", "y", R"($-[0])", "2");
    test(regex_109, "109", R"(ab\Z)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_110, "110", R"(ab\z)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_111, "111", R"(ab$)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_112, "112", R"(ab\Z)", "b\nac\n", "n", R"(-)", "-");
    test(regex_113, "113", R"(ab\z)", "b\nac\n", "n", R"(-)", "-");
    test(regex_114, "114", R"(ab$)", "b\nac\n", "n", R"(-)", "-");
    test(regex_115, "115", R"(ab\Z)", "b\nac", "n", R"(-)", "-");
    test(regex_116, "116", R"(ab\z)", "b\nac", "n", R"(-)", "-");
    test(regex_117, "117", R"(ab$)", "b\nac", "n", R"(-)", "-");
    test(regex_118, "118", R"('ab\Z'm)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_119, "119", R"('ab\z'm)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_120, "120", R"('ab$'m)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_121, "121", R"('ab\Z'm)", "b\nac\n", "n", R"(-)", "-");
    test(regex_122, "122", R"('ab\z'm)", "b\nac\n", "n", R"(-)", "-");
    test(regex_123, "123", R"('ab$'m)", "b\nac\n", "n", R"(-)", "-");
    test(regex_124, "124", R"('ab\Z'm)", "b\nac", "n", R"(-)", "-");
    test(regex_125, "125", R"('ab\z'm)", "b\nac", "n", R"(-)", "-");
    test(regex_126, "126", R"('ab$'m)", "b\nac", "n", R"(-)", "-");
    test(regex_127, "127", R"(ab\Z)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_128, "128", R"(ab\z)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_129, "129", R"(ab$)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_130, "130", R"(ab\Z)", "b\nca\n", "n", R"(-)", "-");
    test(regex_131, "131", R"(ab\z)", "b\nca\n", "n", R"(-)", "-");
    test(regex_132, "132", R"(ab$)", "b\nca\n", "n", R"(-)", "-");
    test(regex_133, "133", R"(ab\Z)", "b\nca", "n", R"(-)", "-");
    test(regex_134, "134", R"(ab\z)", "b\nca", "n", R"(-)", "-");
    test(regex_135, "135", R"(ab$)", "b\nca", "n", R"(-)", "-");
    test(regex_136, "136", R"('ab\Z'm)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_137, "137", R"('ab\z'm)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_138, "138", R"('ab$'m)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_139, "139", R"('ab\Z'm)", "b\nca\n", "n", R"(-)", "-");
    test(regex_140, "140", R"('ab\z'm)", "b\nca\n", "n", R"(-)", "-");
    test(regex_141, "141", R"('ab$'m)", "b\nca\n", "n", R"(-)", "-");
    test(regex_142, "142", R"('ab\Z'm)", "b\nca", "n", R"(-)", "-");
    test(regex_143, "143", R"('ab\z'm)", "b\nca", "n", R"(-)", "-");
    test(regex_144, "144", R"('ab$'m)", "b\nca", "n", R"(-)", "-");
    test(regex_145, "145", R"(abb\Z)", "abb\nb\n", "n", R"(-)", "-");
    test(regex_146, "146", R"(abb\z)", "abb\nb\n", "n", R"(-)", "-");
    test(regex_147, "147", R"(abb$)", "abb\nb\n", "n", R"(-)", "-");
    test(regex_148, "148", R"(abb\Z)", "b\nabb\n", "y", R"($-[0])", "2");
    test(regex_149, "149", R"(abb\z)", "b\nabb\n", "n", R"(-)", "-");
    test(regex_150, "150", R"(abb$)", "b\nabb\n", "y", R"($-[0])", "2");
    test(regex_151, "151", R"(abb\Z)", "b\nabb", "y", R"($-[0])", "2");
    test(regex_152, "152", R"(abb\z)", "b\nabb", "y", R"($-[0])", "2");
    test(regex_153, "153", R"(abb$)", "b\nabb", "y", R"($-[0])", "2");
    test(regex_154, "154", R"('abb\Z'm)", "abb\nb\n", "n", R"(-)", "-");
    test(regex_155, "155", R"('abb\z'm)", "abb\nb\n", "n", R"(-)", "-");
    test(regex_156, "156", R"('abb$'m)", "abb\nb\n", "y", R"($-[0])", "0");
    test(regex_157, "157", R"('abb\Z'm)", "b\nabb\n", "y", R"($-[0])", "2");
    test(regex_158, "158", R"('abb\z'm)", "b\nabb\n", "n", R"(-)", "-");
    test(regex_159, "159", R"('abb$'m)", "b\nabb\n", "y", R"($-[0])", "2");
    test(regex_160, "160", R"('abb\Z'm)", "b\nabb", "y", R"($-[0])", "2");
    test(regex_161, "161", R"('abb\z'm)", "b\nabb", "y", R"($-[0])", "2");
    test(regex_162, "162", R"('abb$'m)", "b\nabb", "y", R"($-[0])", "2");
    test(regex_163, "163", R"(abb\Z)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_164, "164", R"(abb\z)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_165, "165", R"(abb$)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_166, "166", R"(abb\Z)", "b\nac\n", "n", R"(-)", "-");
    test(regex_167, "167", R"(abb\z)", "b\nac\n", "n", R"(-)", "-");
    test(regex_168, "168", R"(abb$)", "b\nac\n", "n", R"(-)", "-");
    test(regex_169, "169", R"(abb\Z)", "b\nac", "n", R"(-)", "-");
    test(regex_170, "170", R"(abb\z)", "b\nac", "n", R"(-)", "-");
    test(regex_171, "171", R"(abb$)", "b\nac", "n", R"(-)", "-");
    test(regex_172, "172", R"('abb\Z'm)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_173, "173", R"('abb\z'm)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_174, "174", R"('abb$'m)", "ac\nb\n", "n", R"(-)", "-");
    test(regex_175, "175", R"('abb\Z'm)", "b\nac\n", "n", R"(-)", "-");
    test(regex_176, "176", R"('abb\z'm)", "b\nac\n", "n", R"(-)", "-");
    test(regex_177, "177", R"('abb$'m)", "b\nac\n", "n", R"(-)", "-");
    test(regex_178, "178", R"('abb\Z'm)", "b\nac", "n", R"(-)", "-");
    test(regex_179, "179", R"('abb\z'm)", "b\nac", "n", R"(-)", "-");
    test(regex_180, "180", R"('abb$'m)", "b\nac", "n", R"(-)", "-");
    test(regex_181, "181", R"(abb\Z)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_182, "182", R"(abb\z)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_183, "183", R"(abb$)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_184, "184", R"(abb\Z)", "b\nca\n", "n", R"(-)", "-");
    test(regex_185, "185", R"(abb\z)", "b\nca\n", "n", R"(-)", "-");
    test(regex_186, "186", R"(abb$)", "b\nca\n", "n", R"(-)", "-");
    test(regex_187, "187", R"(abb\Z)", "b\nca", "n", R"(-)", "-");
    test(regex_188, "188", R"(abb\z)", "b\nca", "n", R"(-)", "-");
    test(regex_189, "189", R"(abb$)", "b\nca", "n", R"(-)", "-");
    test(regex_190, "190", R"('abb\Z'm)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_191, "191", R"('abb\z'm)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_192, "192", R"('abb$'m)", "ca\nb\n", "n", R"(-)", "-");
    test(regex_193, "193", R"('abb\Z'm)", "b\nca\n", "n", R"(-)", "-");
    test(regex_194, "194", R"('abb\z'm)", "b\nca\n", "n", R"(-)", "-");
    test(regex_195, "195", R"('abb$'m)", "b\nca\n", "n", R"(-)", "-");
    test(regex_196, "196", R"('abb\Z'm)", "b\nca", "n", R"(-)", "-");
    test(regex_197, "197", R"('abb\z'm)", "b\nca", "n", R"(-)", "-");
    test(regex_198, "198", R"('abb$'m)", "b\nca", "n", R"(-)", "-");
    test(regex_199, "199", R"('\Aa$'m)", "a\n\n", "y", R"($&)", "a");
    std::cout << std::endl;
  }
}
main: () = {
    test_tests_14_multiline_modifier().run();
}
