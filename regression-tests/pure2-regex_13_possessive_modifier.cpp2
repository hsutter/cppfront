create_result: (resultExpr: std::string, r) -> std::string = {
  result: std::string = "";

  get_next := :(iter) -> _ = {
		start := std::distance(resultExpr&$*.cbegin(), iter);
    firstDollar := resultExpr&$*.find("$", start);
    firstAt := resultExpr&$*.find("@", start);

		end := std::min(firstDollar, firstAt);
		if end != std::string::npos {
			return resultExpr&$*.cbegin() + end;
		}
		else {
			return resultExpr&$*.cend();
		}
  };
  extract_group_and_advance := :(inout iter) -> _ = {
    start := iter;

    while std::isdigit(iter*) next iter++ {}

    return std::stoi(std::string(start, iter));
  };
  extract_until := :(inout iter, to: char) -> _ = {
    start := iter;

    while (to != iter*) next iter++ {} // TODO: Without bracket: error: postfix unary * (dereference) cannot be immediately followed by a (, identifier, or literal - add whitespace before * here if you meant binary * (multiplication)

    return std::string(start, iter);
  };

  iter := resultExpr.begin();

  while iter != resultExpr.end() {
    next := get_next(iter);

    if next != iter {
      result += std::string(iter, next);
    }
    if next != resultExpr.end() {
      if next* == '$' {
        next++;

        if next* == '&' {
          next++;
          result += r.group(0);
        }
        else if next* == '-' || next* == '+' {
          is_start := next* == '-';
          next++;
          if next* == '{' {
            next++; // Skip {
            group := extract_until(next, '}');
            next++; // Skip }
            result += r.group(group);
          }
          else if next* == '[' {
            next++; // Skip [
            group := extract_group_and_advance(next);
            next++; // Skip ]

            if is_start {
              result += std::to_string(r.group_start(group));
            }
            else {
              result += std::to_string(r.group_end(group));
            }
          }
          else {
            // Return max group
            result += r.group(r.group_number() - 1);
          }
        }
        else if std::isdigit(next*) {
          group := extract_group_and_advance(next);
          result += r.group(group);
        }
        else {
          std::cerr << "Not implemented";
        }
      }
      else if next* == '@' {
        next++;
        
        if next* == '-'  || next* == '+' {
          i := 0;
          while i < cpp2::unchecked_narrow<int>(r.group_number()) next i++ {
            pos := 0;
            if next* == '-' {
              pos = r.group_start(i);
            }
            else {
              pos = r.group_end(i);
            }
            result +=  std::to_string(pos);
          }
        }
        else {
          std::cerr << "Not implemented";
        }
      }
      else {
        std::cerr << "Not implemented.";
      }
    }
    iter = next;
  }

  return result;
}

sanitize: (copy str: std::string) -> std::string =
{
  str = cpp2::string_util::replace_all(str, "\a", "\\a");
  str = cpp2::string_util::replace_all(str, "\f", "\\f");
  str = cpp2::string_util::replace_all(str, "\x1b", "\\e");
  str = cpp2::string_util::replace_all(str, "\n", "\\n");
  str = cpp2::string_util::replace_all(str, "\r", "\\r");
  str = cpp2::string_util::replace_all(str, "\t", "\\t");

  return str;
}

test: <M> (regex: M, id: std::string, regex_str: std::string, str: std::string, kind: std::string, resultExpr: std::string,
           resultExpected: std::string) = {
  
  warning: std::string = "";
  if regex.to_string() != regex_str {
    warning = "Warning: Parsed regex does not match.";
  }

  status: std::string = "OK";

  r := regex.search(str);

  if "y" == kind || "yM" == kind || "yS" == kind || "yB" == kind {
    if !r.matched {
      status = "Failure: Regex should apply.";
    }
    else {
      // Have a match check the result

      result := create_result(resultExpr, r);

      if result != resultExpected {
        status = "Failure: Result is wrong. (is: (sanitize(result))$)";
      }
    }
  }
  else if "n" == kind {
    if r.matched {
      status = "Failure: Regex should not apply. Result is '(r.group(0))$'";
    }
  } else {
    status = "Unknown kind '(kind)$'";
  }

  if !warning.empty() {
    warning += " ";
  }
  std::cout << "(id)$_(kind)$: (status)$ (warning)$regex: (regex_str)$ parsed_regex: (regex.to_string())$ str: (sanitize(str))$ result_expr: (resultExpr)$ expected_results (sanitize(resultExpected))$" << std::endl;
}


test_tests_13_possessive_modifier: @regex type = {
  regex_01 := R"(a++a)";
  regex_02 := R"(a*+a)";
  regex_03 := R"(a{1,5}+a)";
  regex_04 := R"(a?+a)";
  regex_05 := R"(a++b)";
  regex_06 := R"(a*+b)";
  regex_07 := R"(a{1,5}+b)";
  regex_08 := R"(a?+b)";
  regex_09 := R"(fooa++a)";
  regex_10 := R"(fooa*+a)";
  regex_11 := R"(fooa{1,5}+a)";
  regex_12 := R"(fooa?+a)";
  regex_13 := R"(fooa++b)";
  regex_14 := R"(fooa*+b)";
  regex_15 := R"(fooa{1,5}+b)";
  regex_16 := R"(fooa?+b)";
  regex_17 := R"((aA)++(aA))";
  regex_18 := R"((aA|bB)++(aA|bB))";
  regex_19 := R"((aA)*+(aA))";
  regex_20 := R"((aA|bB)*+(aA|bB))";
  regex_21 := R"((aA){1,5}+(aA))";
  regex_22 := R"((aA|bB){1,5}+(aA|bB))";
  regex_23 := R"((aA)?+(aA))";
  regex_24 := R"((aA|bB)?+(aA|bB))";
  regex_25 := R"((aA)++b)";
  regex_26 := R"((aA|bB)++b)";
  regex_27 := R"((aA)*+b)";
  regex_28 := R"((aA|bB)*+b)";
  regex_29 := R"((aA){1,5}+b)";
  regex_30 := R"((aA|bB){1,5}+b)";
  regex_31 := R"((aA)?+b)";
  regex_32 := R"((aA|bB)?+b)";
  regex_33 := R"(foo(aA)++(aA))";
  regex_34 := R"(foo(aA|bB)++(aA|bB))";
  regex_35 := R"(foo(aA)*+(aA))";
  regex_36 := R"(foo(aA|bB)*+(aA|bB))";
  regex_37 := R"(foo(aA){1,5}+(aA))";
  regex_38 := R"(foo(aA|bB){1,5}+(aA|bB))";
  regex_39 := R"(foo(aA)?+(aA))";
  regex_40 := R"(foo(aA|bB)?+(aA|bB))";
  regex_41 := R"(foo(aA)++b)";
  regex_42 := R"(foo(aA|bB)++b)";
  regex_43 := R"(foo(aA)*+b)";
  regex_44 := R"(foo(aA|bB)*+b)";
  regex_45 := R"(foo(aA){1,5}+b)";
  regex_46 := R"(foo(aA|bB){1,5}+b)";
  regex_47 := R"(foo(aA)?+b)";
  regex_48 := R"(foo(aA|bB)?+b)";
  run: (this) = {
    std::cout << "Running tests_13_possessive_modifier:"<< std::endl;
    test(regex_01, "01", R"(a++a)", "aaaaa", "n", R"(-)", "-");
    test(regex_02, "02", R"(a*+a)", "aaaaa", "n", R"(-)", "-");
    test(regex_03, "03", R"(a{1,5}+a)", "aaaaa", "n", R"(-)", "-");
    test(regex_04, "04", R"(a?+a)", "ab", "n", R"(-)", "-");
    test(regex_05, "05", R"(a++b)", "aaaaab", "y", R"($&)", "aaaaab");
    test(regex_06, "06", R"(a*+b)", "aaaaab", "y", R"($&)", "aaaaab");
    test(regex_07, "07", R"(a{1,5}+b)", "aaaaab", "y", R"($&)", "aaaaab");
    test(regex_08, "08", R"(a?+b)", "ab", "y", R"($&)", "ab");
    test(regex_09, "09", R"(fooa++a)", "fooaaaaa", "n", R"(-)", "-");
    test(regex_10, "10", R"(fooa*+a)", "fooaaaaa", "n", R"(-)", "-");
    test(regex_11, "11", R"(fooa{1,5}+a)", "fooaaaaa", "n", R"(-)", "-");
    test(regex_12, "12", R"(fooa?+a)", "fooab", "n", R"(-)", "-");
    test(regex_13, "13", R"(fooa++b)", "fooaaaaab", "y", R"($&)", "fooaaaaab");
    test(regex_14, "14", R"(fooa*+b)", "fooaaaaab", "y", R"($&)", "fooaaaaab");
    test(regex_15, "15", R"(fooa{1,5}+b)", "fooaaaaab", "y", R"($&)", "fooaaaaab");
    test(regex_16, "16", R"(fooa?+b)", "fooab", "y", R"($&)", "fooab");
    test(regex_17, "17", R"((aA)++(aA))", "aAaAaAaAaA", "n", R"(-)", "aAaAaAaAaA");
    test(regex_18, "18", R"((aA|bB)++(aA|bB))", "aAaAbBaAbB", "n", R"(-)", "aAaAbBaAbB");
    test(regex_19, "19", R"((aA)*+(aA))", "aAaAaAaAaA", "n", R"(-)", "aAaAaAaAaA");
    test(regex_20, "20", R"((aA|bB)*+(aA|bB))", "aAaAbBaAaA", "n", R"(-)", "aAaAbBaAaA");
    test(regex_21, "21", R"((aA){1,5}+(aA))", "aAaAaAaAaA", "n", R"(-)", "aAaAaAaAaA");
    test(regex_22, "22", R"((aA|bB){1,5}+(aA|bB))", "aAaAbBaAaA", "n", R"(-)", "aAaAbBaAaA");
    test(regex_23, "23", R"((aA)?+(aA))", "aAb", "n", R"(-)", "aAb");
    test(regex_24, "24", R"((aA|bB)?+(aA|bB))", "bBb", "n", R"(-)", "bBb");
    test(regex_25, "25", R"((aA)++b)", "aAaAaAaAaAb", "y", R"($&)", "aAaAaAaAaAb");
    test(regex_26, "26", R"((aA|bB)++b)", "aAbBaAaAbBb", "y", R"($&)", "aAbBaAaAbBb");
    test(regex_27, "27", R"((aA)*+b)", "aAaAaAaAaAb", "y", R"($&)", "aAaAaAaAaAb");
    test(regex_28, "28", R"((aA|bB)*+b)", "bBbBbBbBbBb", "y", R"($&)", "bBbBbBbBbBb");
    test(regex_29, "29", R"((aA){1,5}+b)", "aAaAaAaAaAb", "y", R"($&)", "aAaAaAaAaAb");
    test(regex_30, "30", R"((aA|bB){1,5}+b)", "bBaAbBaAbBb", "y", R"($&)", "bBaAbBaAbBb");
    test(regex_31, "31", R"((aA)?+b)", "aAb", "y", R"($&)", "aAb");
    test(regex_32, "32", R"((aA|bB)?+b)", "bBb", "y", R"($&)", "bBb");
    test(regex_33, "33", R"(foo(aA)++(aA))", "fooaAaAaAaAaA", "n", R"(-)", "fooaAaAaAaAaA");
    test(regex_34, "34", R"(foo(aA|bB)++(aA|bB))", "foobBbBbBaAaA", "n", R"(-)", "foobBbBbBaAaA");
    test(regex_35, "35", R"(foo(aA)*+(aA))", "fooaAaAaAaAaA", "n", R"(-)", "fooaAaAaAaAaA");
    test(regex_36, "36", R"(foo(aA|bB)*+(aA|bB))", "foobBaAbBaAaA", "n", R"(-)", "foobBaAbBaAaA");
    test(regex_37, "37", R"(foo(aA){1,5}+(aA))", "fooaAaAaAaAaA", "n", R"(-)", "fooaAaAaAaAaA");
    test(regex_38, "38", R"(foo(aA|bB){1,5}+(aA|bB))", "fooaAbBbBaAaA", "n", R"(-)", "fooaAbBbBaAaA");
    test(regex_39, "39", R"(foo(aA)?+(aA))", "fooaAb", "n", R"(-)", "fooaAb");
    test(regex_40, "40", R"(foo(aA|bB)?+(aA|bB))", "foobBb", "n", R"(-)", "foobBb");
    test(regex_41, "41", R"(foo(aA)++b)", "fooaAaAaAaAaAb", "y", R"($&)", "fooaAaAaAaAaAb");
    test(regex_42, "42", R"(foo(aA|bB)++b)", "foobBaAbBaAbBb", "y", R"($&)", "foobBaAbBaAbBb");
    test(regex_43, "43", R"(foo(aA)*+b)", "fooaAaAaAaAaAb", "y", R"($&)", "fooaAaAaAaAaAb");
    test(regex_44, "44", R"(foo(aA|bB)*+b)", "foobBbBaAaAaAb", "y", R"($&)", "foobBbBaAaAaAb");
    test(regex_45, "45", R"(foo(aA){1,5}+b)", "fooaAaAaAaAaAb", "y", R"($&)", "fooaAaAaAaAaAb");
    test(regex_46, "46", R"(foo(aA|bB){1,5}+b)", "foobBaAaAaAaAb", "y", R"($&)", "foobBaAaAaAaAb");
    test(regex_47, "47", R"(foo(aA)?+b)", "fooaAb", "y", R"($&)", "fooaAb");
    test(regex_48, "48", R"(foo(aA|bB)?+b)", "foobBb", "y", R"($&)", "foobBb");
    std::cout << std::endl;
  }
}
main: () = {
    test_tests_13_possessive_modifier().run();
}
